# Generated by Django 5.1 on 2024-09-03 15:03

import db.validators
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('author', models.CharField(blank=True, max_length=100, null=True)),
                ('link', models.URLField(blank=True, max_length=500, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to=db.validators.get_file_path, validators=[db.validators.attatchment_validate])),
                ('image', models.ImageField(blank=True, null=True, upload_to=db.validators.get_image_path, validators=[db.validators.image_validate, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'jpeg', 'webp'])])),
                ('flag', models.CharField(max_length=255)),
                ('disable_solve_notif', models.BooleanField(default=False)),
                ('is_over', models.BooleanField(default=False)),
                ('message_id', models.CharField(blank=True, editable=False, max_length=50, null=True)),
                ('add_time', models.DateTimeField(auto_now_add=True)),
                ('solve_count', models.IntegerField(default=0, editable=False)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='db.category')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_webhook', models.URLField(help_text='Webhook URL to send new challenge notifications', max_length=500)),
                ('solve_webhook', models.URLField(help_text='Webhook URL to send challenge solve notifications', max_length=500)),
                ('new_challenge_announce_message', models.TextField(default='New Challenge is out! @everyone', help_text='Message to send when a new challenge is posted')),
                ('first_blood_msg_format', models.TextField(default='First Blood by {xxx} :drop_of_blood: :space_invader:', help_text='Message to send when a user solves a challenge first')),
                ('top_x_priority', models.PositiveIntegerField(default=3, help_text='Use priority_blood_msg_format for top X solvers')),
                ('priority_blood_msg_format', models.TextField(default='{n} Blood {xxx} :fire: :drop_of_blood:', help_text="{n} is replaced by the rank of the solver and {xxx} is replaced by the solver's ping")),
                ('display_solves_upto', models.PositiveIntegerField(default=0, help_text='stop notifying after n solves, 0 for infinite')),
                ('solved_msg_format', models.TextField(default='{n}. {xxx} solved ðŸ«¡', help_text="{xxx} is replaced by the solver's ping and {n} is replaced by rank")),
                ('webhook_bot_name', models.CharField(default='Conan', help_text='Name of the bot to use in announcements', max_length=50)),
                ('webhook_bot_avatar', models.URLField(default='https://cdn.discordapp.com/avatars/1280495542941647000/a9282d721adfeabf0b15a91459daa75d.webp', help_text='Avatar of the bot', max_length=500)),
                ('embed_author_name', models.CharField(default='CTF', help_text='Name of embeds message author', max_length=50)),
                ('embed_author_icon', models.URLField(default='https://capturetheflag.withgoogle.com/img/Flag.png', help_text='Icon of the author', max_length=500)),
                ('challenge_footer_text', models.CharField(default='Submit flag to Conan bot using slash command `/flag`', help_text='Footer text for the challenge embed', max_length=200)),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Solve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solved_time', models.DateTimeField(auto_now_add=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
